package recordstuff;

import java.sql.SQLException;

record Client(String name, int creditLimit) {
  // line n1
//  public Client(String name) {
//    this(name, 0);
//  }

  // this REPLACES the canonical constructor
  // it MUST initialize the fields for the components
  // formal param names for a canonical constructor MUST match the names of the components!!!
//  public Client(String name1, int creditLimit) {
  // canonical MUST not be less accessible than the type (bad choice!!!)


  public Client(String name, int creditLimit) /*throws Exception*/ {
//    super(); // THIS is not permitted, delegation to parent is not our business
    // ALL component fields MUST be initialized here...
    // AND NOT anywhere else!
    this.name = name;
    this.creditLimit = creditLimit;
  }

  public Client() throws Exception {
    this("X", 0);
    if (Math.random() > 0.5) throw new SQLException();
  }

//  private Client() {
//    this("Unknown", 0);
//    }

    // "compact" constructor
/*
  Client {
    if (name == null || name.length() == 0) throw new IllegalArgumentException("Bad name");
    name = "Mx. " + name;
    // now the AUTOGENERATED canonical constructor is "pasted" on the end
    // by the compiler
    // cannot refer to the fields AT ALL In here
    // they are UNINIALIZED, and WILL be initialized by the canoical constructor
  }
*/
}

//    A) At line n1
//public Client(String name) {
//    this(name, 0);
//    }
//    B) at line n1
//public Client(String name, int creditLimit) {
//    super();
//    this.name = name;
//    this.creditLimit = creditLimit;
//    }
//    C) as a separate declaration:
//record SpecialClient(String name, int creditLimit, String greeting)
//    extends Client(name, creditLimit) {}
//    D) at line n1
//private Client() {
//    this("Unknown", 0);
//    }
//    E) at line n1
//    Client {}
public class InitializationExample {
}
